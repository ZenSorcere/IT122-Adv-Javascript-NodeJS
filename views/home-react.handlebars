<html>
<head>
    <title>React App Demo</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
    <title>Mike's Movies</title>
    <link rel="stylesheet" type="text/css" href="./css/styles.css" />
</head>

<body>

<div id="root"></div>
<script type="text/babel">

/* Movie Component
    movieArray and selected props passed. Map the passed Array info to list items
    with the id property as a key, with the title property as the text. Include an a tag to make the text clickable.  onClick, the selected prop is passed.
*/
    const Movie = props => {  
        return (
            <div className="mainlist">
              <h2>Select a movie to learn more:</h2>
                <ul>
                {props.movieArray.map((movie) => (
                    <li key={movie._id}><a href="#" onClick={props.selected}>{movie.title}</a></li>
                ))}
                </ul>   
            </div>
        ); 
    };

/* MovieDetails Component
    currentMovie and the resetCurrent function passed as props. diplsays each
    property from the currentMovie object in a list. Also includes a link to 
    return to the full list of movies by passing a function to reset currentMovie when clicked. 
*/
    const MovieDetails = props => {
        return (
            <div className="sidebar">
                <h2>Details for {props.current.title || "selected movie:"}</h2>               
               
                <form>
                    Title: <input onChange={props.edit} type="text" name= "title" value={props.current.title || ""}  /><br/>
                    Director: <input onChange={props.edit} type="text" name= "dir" value={props.current.dir || ""}  /><br/>
                    Release Year: <input onChange={props.edit} type="text" name= "year" value={props.current.year || ""}  /><br/>
                    MPAA Rating: <input  onChange={props.edit} type="text" name= "rating" value={props.current.rating || ""} />
                </form>
                <button onClick={props.reset}>Clear Fields</button>
                <button onClick={props.delete}>Delete Movie</button>
                <button onClick={props.save}>Save Entry</button>
                <div id="status"></div>
            </div>
        )
    }


    class App extends React.Component{
      constructor(props){
          super(props);
          // Set initial state using data from server application
          this.state = {
            movie: {{{ movies }}}, //provided from index.js for '/' path. 
            currentMovie: { } // current selected item
          };

          // bind application state to click handler
          this.selectItem = this.selectItem.bind(this);
          this.resetCurrent = this.resetCurrent.bind(this);
          this.handleEdit = this.handleEdit.bind(this);
          this.handleDelete = this.handleDelete.bind(this);
          this.handleSave = this.handleSave.bind(this);
       }

      /*
      Handle list item clicked
        find movie object in movies array that matches the text of the link. 
        setState then sets currentMovie to that movie. 
      */
      selectItem(event) {
        event.preventDefault();
        const movie = this.state.movie.find(movie => event.target.text === movie.title);
        this.setState({currentMovie: movie});
        ReactDOM.render(<h2></h2>, document.getElementById('status'));
        /*
        console.log("selected " + movie.title);
        console.log(this.state.currentMovie);
        console.log(event.target.innerText);
        */
      }

    handleEdit (event) {
        console.log(event.target.name)
        console.log(event.target.value)
        let newMovie = this.state.currentMovie;
        newMovie[event.target.name] = event.target.value;
        this.setState({currentMovie: newMovie});
        
    }

    handleDelete () {
      console.log('delete me');
      fetch(`/api/movies/delete/${this.state.currentMovie.title}`)
        .then((response) => {
          console.log(response);
          return response.json();
        })
        .then((result) => {
          console.log(result)
          // on success remove deleted item from this.state.movies
          //this.setState({movie: {{{ movies }}} });
          this.setState({ movie: [...this.state.movie.filter(movie => movie.title !==this.state.currentMovie.title)] });
          
          console.log(this.state.movie);
          console.log(this.state.currentMovie);
          ReactDOM.render(<h2 className="conf">"{this.state.currentMovie.title}" Deleted?</h2>, document.getElementById('status'));
          this.resetCurrent();
        })
        .catch(err => console.log(err))
    }

    handleSave (event) {
      console.log("Save me!");
      const newMov = this.state.currentMovie;
      newMov[event.target.name] = event.target.value;
      fetch(`/api/movies/${this.state.currentMovie}`, {
        method: "POST",
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newMov)
      })
      .then((response) => response.json())
      .then((data) => {
  // handle successful response
          this.setState({ movie: this.state.movie })
          /* const movie = this.state.movie.findOneAndUpdate(movie => event.target.text === movie.title);
          */
          
          this.setState({ movie: [...this.state.movie.findOne(movie => movie.title)]
          });
          
      
      
      
      ReactDOM.render(<h2 className="conf">"{this.state.currentMovie.title}" Added?</h2>, document.getElementById('status'));
          this.resetCurrent();
      })
      
      .catch((err) => console.log(err))
    }
    /*
    Reset currentMovie
        function created to return currentMovie to it's original empty state
    */ 
      resetCurrent() {
          this.setState({currentMovie: { } })
      }

      render() {
        // render app UI elements
/* 
If the currentMovie Object *doesn't* have zero parameters(i.e. something has
  been assigned to currentMovie), then show the MovieDetails component. 
Pass props of what is in currentMovie, as well as the resetCurrent function (to
  be used for the Return to list link). 
Else: while currentMovie is empty, show the Movie Component, passing in the 
  array state and the selectItem function. 
*/ 
        /* if (Object.entries(this.state.currentMovie).length !== 0 ) {
            return (
            <div>
                <h1>Welcome to Mike's Movies!</h1>
                <MovieDetails current={this.state.currentMovie} reset={() => this.resetCurrent()} />
            </div>
            );
        }  else { */
          
        return (
        
          <div className="wrapper">
            <h1>Welcome to Mike's Movies!</h1> 
            
            <Movie movieArray={this.state.movie} selected={event => this.selectItem(event)}/>
            <MovieDetails
                current={this.state.currentMovie}
                reset={() => this.resetCurrent()}
                edit={this.handleEdit}
                delete={this.handleDelete}
                save={this.handleSave}
            />
          </div>
          );
     // }}
    }
    }

    ReactDOM.render(<App />, document.getElementById('root'));
    
</script>
</body>
</html>

{{!-- FROM CLAS 8/11/2020


 --}}